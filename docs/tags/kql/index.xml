<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KQL on Erlend Rushfeldt - Blog</title>
    <link>/tags/kql/</link>
    <description>Recent content in KQL on Erlend Rushfeldt - Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Jun 2023 22:27:19 +0200</lastBuildDate><atom:link href="/tags/kql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cost Optmization in the Wild</title>
      <link>/blogposts/cost-optmization-in-the-wild/</link>
      <pubDate>Mon, 12 Jun 2023 22:27:19 +0200</pubDate>
      
      <guid>/blogposts/cost-optmization-in-the-wild/</guid>
      <description>Here is a collection of snippets of code used in the &amp;ldquo;Cost Optimization in the wild! - Experiences from reducing costs&amp;rdquo; presentation. If you are missing any snippets of code used in a demo, or if you have any other question, feel free to message me on Twitter or LinkedIn.
Orphaned disks Old Snapshots App Gateways and Load Balancers Storage v1 App Service Plans Orphaned disks KQL to find disks resources | where type == &amp;#34;microsoft.</description>
    </item>
    
    <item>
      <title>Reduce your Azure cost by finding unused resources</title>
      <link>/blogposts/finding-orphaned-resources/</link>
      <pubDate>Wed, 15 Mar 2023 10:00:00 +0100</pubDate>
      
      <guid>/blogposts/finding-orphaned-resources/</guid>
      <description>In Microsoft&amp;rsquo;s Well-Architected Framework there is a pillar for Cost Optimization. Some of the principals for optimizing cost are to continuously look for and clean up orphaned resources like disks and public IPs. In this blog I will show you some KQL queries that will help you find these resources and considerations you should take before cleaning them up. You can then use these queries in an Azure Workbook or dashboard to continuously review your environment.</description>
    </item>
    
    <item>
      <title>Query Azure Policy Compliance results using KQL</title>
      <link>/blogposts/query-azure-policy-compliance/</link>
      <pubDate>Fri, 20 May 2022 17:48:39 +0200</pubDate>
      
      <guid>/blogposts/query-azure-policy-compliance/</guid>
      <description>Last blogpost I showed you an Azure Policy that checked for a SQL server firewall rule. The results would be a compliance view in Azure Policy. After the blogpost, me and Dennes Torres had a chat about the results you get in the compliance view. The problem: you don&amp;rsquo;t get the resource ID or resource name for the SQL server with the setting on. This isn&amp;rsquo;t really a problem if you have only one not-compliant resource, but if you have several, it becomes tedious.</description>
    </item>
    
  </channel>
</rss>
